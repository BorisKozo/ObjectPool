(function (exports) {

  var tempItem;
  var tempCounter;

  //Constructor for a new object pool
  exports.$Pool = function () {
    this._items = [];
    this._head = 0;
  }

  //Returns an object from the pool or null if the pool is empty;
  exports.$Pool.prototype.get = function () {
    if (this._head === 0) return null;
    this._head--;
    return this._items[this._head];
  }

  //Returns an object from the pool or null otherwise;
  exports.$Pool.prototype.release = function (item) {
    this._items[this._head] = item;
    this._head++;
  }

  //Returns the number of objects in the pool
  exports.$Pool.prototype.count = function () {
    return this._head;
  }

  //A constructor for a Constructor Generator - A generator based on a constructor function
  exports.$ConstructorGenerator = function (constructor, options) {
    this.constructor = constructor;
    this.options = options || {};
    this.pool = new exports.$Pool();

    if (this.options.count) {
      tempCounter = this.options.count;
      while (tempCounter > 0) {
        this.pool.release(new constructor());
        tempCounter--;
      }
    }
  }

  //Returns an object generated by this generator
  //The args will be passed to the initializer if such was defined in the options
  exports.$ConstructorGenerator.prototype.get = function (args) {
    tempItem = this.pool.get();
    if (tempItem === null) return null;
    if (this.options.init) {
      this.options.init.apply(tempItem, arguments);
    }
    return tempItem;
  }

  //Returns the number of currently available items in the pool
  exports.$ConstructorGenerator.prototype.count = function () {
    return this.pool.count();
  }


  //Generates a token that can be used to request the object created by the constructor
  exports.generate = function (constructor, options) {
    return new exports.$ConstructorGenerator(constructor, options);
  }
})(typeof exports === 'undefined' ? this['objectPool'] = {} : exports);